HowToPlay
════════════════════════════════════════════════════════════════════════
let disable_input

def enter_menu_mode(data):
    reset_post_effects()
    set_mode(Menu) because "Returned to main menu"

enter
────────────────────────────────────────────────────────────────────────
// This event runs when the mode is entered via set_mode() or push_mode().


frame
────────────────────────────────────────────────────────────────────────
bgm_update()
if not disable_input:
    if gamepad_array[0].bb != 0:
        disable_input = true
        play_sound(CURSOR_ACCEPT_SOUND)
        add_frame_hook(fade_out, enter_menu_mode, 30, ∅, {})
        

const text_args = {font:font, x_align:"left", y_align:"top", wrap_width:SCREEN_SIZE.x, markup:true, color:#c}
let line_y = 0
line_y += draw_text({text:"The goal of the game is to capture as many hexes as possible.\n ", pos:xy(0, line_y),
    text_size:max(0,mode_frames/3), ...text_args}).y
line_y += draw_text({text:"Each turn, a player may flip 1 or more tiles adjacent to one of their existing tiles.", pos:xy(0, line_y),
    text_size:max(0,mode_frames/3), ...text_args}).y
line_y += draw_text({text:"A preview of each player's next move is shown outside the board.", pos:xy(0, line_y),
    text_size:max(0,mode_frames/3), ...text_args}).y
line_y += draw_text({text:"Normal moves ({color:#f white arrows}) can only flip grey, neutral tiles.", pos:xy(0, line_y),
    text_size:max(0,mode_frames/3), ...text_args}).y
line_y += draw_text({text:"A {color:#f00 red arrow} can flip tiles belonging to other players.", pos:xy(0, line_y),
    text_size:max(0,mode_frames/3), ...text_args}).y
line_y += draw_text({text:"Once all neutral tiles are claimed, the player who has claimed the most tiles wins!", pos:xy(0, line_y),
    text_size:max(0,mode_frames/3), ...text_args}).y
draw_text({font:font, pos:xy(50% SCREEN_SIZE.x, 90% SCREEN_SIZE.y),
    text:replace("(b) Return To Menu", gamepad_array[0].prompt), color:#f, x_align:"center"})

leave
────────────────────────────────────────────────────────────────────────
// This event runs just before leaving for another mode by set_mode() or pop_mode().

