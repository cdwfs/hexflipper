Play
════════════════════════════════════════════════════════════════════════

/** Clone of map for the game */
let map
let player_types = []
let player_hexes = []
let player_scores = []
let disable_input = false
const PLAYER_COUNT = 4 // players are skipped if player_types[i] == PLAYER_TYPE_NONE
const PLAYER_NEUTRAL = -1
const INVALID_HEX = -2
const PLAYER_START_HEXES = [xy(1,9), xy(9,1), xy(5,1), xy(5,9)]
const PLAYER_CLICK_SOUNDS = [
    {sound:blip_05_sound, pan: -50%, pitch:85%, volume: 100%},
    {sound:blip_05_sound, pan: +50%, pitch:170%, volume: 100%},
    {sound:blip_07_sound, pan: -50%, pitch:101%, volume: 120%},
    {sound:blip_07_sound, pan: +50%, pitch:128%, volume: 100%},
    ]
const PLAYER_TERRITORY_SPRITES = [
    hex_sprite.territory_p1,
    hex_sprite.territory_p2,
    hex_sprite.territory_p3,
    hex_sprite.territory_p4,
    ]
const PLAYER_OVERLAY_SPRITES = [
    hex_sprite.overlay_p1,
    hex_sprite.overlay_p2,
    hex_sprite.overlay_p3,
    hex_sprite.overlay_p4,
    ]
const PLAYER_PREVIEW_MAP_COORDS = [
    xy(3,8),
    xy(12,2),
    xy(3,2),
    xy(12,8),
    ]
const NUM_BOARD_HEXES = 61
const VALID_HEX_COORD_MASK = [
    0b0000000000000000,
    0b0000001111100000,
    0b0000001111110000,
    0b0000001111111000,
    0b0000001111111100,
    0b0000001111111110,
    0b0000000111111110,
    0b0000000011111110,
    0b0000000001111110,
    0b0000000000111110,
    0b0000000000000000,
    ]
const DIR_NE = 0
const DIR_E  = 1
const DIR_SE = 2
const DIR_SW = 3
const DIR_W  = 4
const DIR_NW = 5
const HEX_COORD_NEIGHBOR_OFFSETS = [
    xy(+0,+1), // NE
    xy(+1,+0), // E
    xy(+1,-1), // SE
    xy(+0,-1), // SW
    xy(-1,+0), // W
    xy(-1,+1), // NW
    ]
const ARROW_SPRITES = [
    hex_sprite.arrow_ne[0],
    hex_sprite.arrow_e[0],
    hex_sprite.arrow_se[0],
    hex_sprite.arrow_sw[0],
    hex_sprite.arrow_w[0],
    hex_sprite.arrow_nw[0],
    ]
const ARROW2_SPRITES = [
    hex_sprite.arrow2_ne[0],
    hex_sprite.arrow2_e[0],
    hex_sprite.arrow2_se[0],
    hex_sprite.arrow2_sw[0],
    hex_sprite.arrow2_w[0],
    hex_sprite.arrow2_nw[0],
    ]

// Draw a sprite at the provided map coordinates
def draw_sprite_on_hex_map(sprite, map_coord, z default 0):
    let pos = xy(
        MUL(HEX_WIDTH, MAD(½, map_coord.y bitand 1, map_coord.x)),
        MUL(HEX_HEIGHT_75, map_coord.y))
    draw_sprite({sprite:sprite, pos:pos, z:z})

// Per-cell owner info
let map_cell_owner = []
// Get the player ID of a map cell (PLAYER_NEUTRAL for unclaimed cells, INVALID_HEX for cells outside the play area)
def get_cell_owner_map_coord(map_coord):
    return map_cell_owner[map_coord.x][map_coord.y]
def get_cell_owner_hex_coord(hex_coord):
    return get_cell_owner_map_coord(transform_hex_to_map_coord(hex_coord))
// Change the owner of a cell (including swapping its sprite)
def set_cell_owner_map_coord(map_coord, player_id):
    map_cell_owner[map_coord.x][map_coord.y] = player_id
    set_map_sprite(map, map_coord,
        if player_id == PLAYER_NEUTRAL then hex_sprite.territory_neutral else PLAYER_TERRITORY_SPRITES[player_id])
def set_cell_owner_hex_coord(hex_coord, player_id):
    set_cell_owner_map_coord(transform_hex_to_map_coord(hex_coord), player_id)
// Check whether a cell is within the play area
def is_valid_board_hex(hex_coord):
    return get_cell_owner_hex_coord(hex_coord) ≠ INVALID_HEX

// Generate a move code. Not all moves are equally likely.
let player_current_moves = []
let player_next_moves = []
def generate_move_code():
    const p = ξ
    let bit_count = 0
    if p < 0.50:
        bit_count = 1
    else if p < 0.80:
        bit_count = 2
    else if p < 0.90:
        bit_count = 3
    else if p < 0.95:
        bit_count = 4
    else if p < 0.98:
        bit_count = 5
    else:
        bit_count = 6
    let move = 0b000000
    const set_bits = slice(shuffled([0,1,2,3,4,5]), 0, bit_count)
    for b in set_bits:
        move ∪= 1<<b
    // Random chance of one direction being able to flip non-neutral tiles
    if ξ < SUPER_ARROW_CHANCE:
        move ∪= 1<<(set_bits[0]+6)
    return move

// turn-taking
let current_player = -1
let current_player_move_committed = false
def advance_to_next_player():
    current_player = (current_player+1) % 4
    while player_types[current_player] == PLAYER_TYPE_NONE:
        current_player = (current_player+1) % 4

// Need a special fade-out function here, since we don't know exactly how many frames
// it will take to reach the target point in the music.
def at_beat0_enter_gameover(frames_left, total_frames, data):
    if bgm_beat_in_measure == 0 and bgm_beat_ff:
        reset_post_effects()
        // Since this hook runs forever, make sure to remove it now that we're done!
        remove_frame_hooks_by_mode(Play)
        set_mode(GameOver, player_types, player_scores) because "Game finished"

let pulsing_gizmos = []
let spinning_gizmos = []

let BD_BEATS = []
let SD_BEATS = []
def draw_gizmos() preserving_transform:
    reset_transform()
    const sq3 = sqrt(3)
    const verts = [xy(0,2), xy(-sq3, 1), xy(-sq3,-1), xy(0,-2), xy(sq3,-1), xy(sq3,1)]
    const hex_poly_args = {vertex_array:verts, z:-10,}
    for gizmo in spinning_gizmos:
        const theta = clamp((3*bgm_measure_t)^3,0,1) * pi/3
        draw_poly({pos:gizmo.pos, scale:gizmo.scale, angle:theta, outline:gizmo.outline, ...hex_poly_args})
    for gizmo in pulsing_gizmos:
        const b = bgm_beat % (64*12)
        let beats = if gizmo.style == 0 then BD_BEATS else SD_BEATS
        if bgm_beat_ff && find(beats, b) != nil:
            gizmo.scale = 2
        else:
            gizmo.scale -= 0.02
        draw_poly({pos:gizmo.pos, scale:10*xy(gizmo.scale, gizmo.scale), angle:gizmo.angle, outline:gizmo.outline, ...hex_poly_args})

def get_best_move_hex(player_id):
    let best_hc = PLAYER_START_HEXES[player_id]
    let best_flips = 0
    const move = player_current_moves[player_id]
    for x < map.size.x:
        for y < map.size.y:
            const mc = xy(x,y)
            // only consider valid cells for this player to move
            if get_cell_owner_map_coord(mc) != player_id:
                continue
            // count how many neighboring cells would be flipped
            const hc = transform_map_coord_to_hex(mc)
            let flips = 0
            for neighbor < 6:
                if (move & (1<<neighbor)) ≠ 0:
                    const neighbor_hex = hc + HEX_COORD_NEIGHBOR_OFFSETS[neighbor]
                    const is_arrow2 = (move & (1<<(neighbor+6))) ≠ 0
                    const neighbor_hex_owner = get_cell_owner_hex_coord(neighbor_hex)
                    // out-of-bounds hexes can't be flipped
                    if neighbor_hex_owner == INVALID_HEX:
                        continue
                    // Normal arrows can only flip neutral tiles
                    else if neighbor_hex_owner == PLAYER_NEUTRAL:
                        flips += 1
                    // "super" arrows can flip any tiles
                    else if is_arrow2 and neighbor_hex_owner != player_id:
                        flips += 1
            if flips > best_flips:
                best_hc = hc
                best_flips = flips
    return {hex:best_hc, flips:best_flips}

let cpu_move_sequence = nil
def move_cpu_player():
    let best_move = get_best_move_hex(current_player)
    player_hexes[current_player] = best_move.hex
def commit_cpu_player():
    current_player_move_committed = true
    

enter(game_info)
────────────────────────────────────────────────────────────────────────

map = clone(game_board_map)
player_types = clone(game_info.player_types)
set_random_seed() // default is time-based

// Reset per-player data
player_hexes = [xy(1,9), xy(9,1), xy(5,1), xy(5,9)]
player_current_moves = [0,0,0,0]
player_next_moves = [0,0,0,0]
player_scores = [0,0,0,0]

// construct bass/snare beat lists
for beats at measure in RAW_BD_BEATS:
    for b in beats:
        push(BD_BEATS, 12*measure+b)
for beats at measure in RAW_SD_BEATS:
    for b in beats:
        push(SD_BEATS, 12*measure+b)

// Spawn gizmos
push(spinning_gizmos, {pos:xy(20% SCREEN_SIZE.x, 10% SCREEN_SIZE.y), scale:xy(10,10), outline:#800000})
push(spinning_gizmos, {pos:xy(95% SCREEN_SIZE.x, 65% SCREEN_SIZE.y), scale:xy(10,10), outline:#202080})
push(pulsing_gizmos, {pos:xy(10% SCREEN_SIZE.x, 80% SCREEN_SIZE.y), style:0,  outline:#FF4080})
push(pulsing_gizmos, {pos:xy(10% SCREEN_SIZE.x, 80% SCREEN_SIZE.y), angle:π/2, style:1,  outline:#404080})

set_transform(xy(-48, SCREEN_SIZE.y + 8), xy(1, -1))

map_cell_owner = []
for x < size(map):
    let new_col = []
    for y < size(map[x]):
        let hc = transform_map_coord_to_hex(xy(x,y))
        new_col.push(if (VALID_HEX_COORD_MASK[hc.y] & (1<<hc.x)) ≠ 0 then PLAYER_NEUTRAL else INVALID_HEX)
    map_cell_owner.push(new_col)
for i < PLAYER_COUNT:
    if player_types[i] == PLAYER_TYPE_NONE:
        continue
    // Players start on their own territory
    set_cell_owner_hex_coord(PLAYER_START_HEXES[i], i)
    player_scores[i] += 1
    // random starting moves for each player
    player_current_moves[i] = generate_move_code()
    player_next_moves[i] = generate_move_code()
    // Initialize each player's "next move" preview
    let preview_mc = PLAYER_PREVIEW_MAP_COORDS[i]
    let preview_hc = transform_map_coord_to_hex(preview_mc)
    for neighbor < 6:
        const arrow_sprite = if (player_next_moves[i] & (1<<(neighbor+6))) == 0 then ARROW_SPRITES[neighbor] else ARROW2_SPRITES[neighbor]
        map_set_sprite_by_hex(map, preview_hc + HEX_COORD_NEIGHBOR_OFFSETS[neighbor],
            if (player_next_moves[i] & (1<<neighbor)) ≠ 0 then arrow_sprite else ∅)

// reset turn counter
current_player = 0
current_player_move_committed = false

disable_input = false

let loops = [
    {sound:bgmusic_sound, loop:true, volume:100%},
    ]
bgm_start(loops)

leave
────────────────────────────────────────────────────────────────────────
bgm_stop()
reset_transform()

frame
────────────────────────────────────────────────────────────────────────

//
// reactive-music stuff goes here
//
bgm_update()
local:
    let postfx = get_post_effects()
    postfx.bloom = -((bgm_measure_t-1)^9)
    set_post_effects(postfx)

// Check for victory
if player_scores[0] + player_scores[1] + player_scores[2] + player_scores[3] >= NUM_BOARD_HEXES:
    add_frame_hook(at_beat0_enter_gameover, nil, infinity, Play, {})

// handle dpad input
if not disable_input:
    for i < PLAYER_COUNT:
        if player_types[i] != PLAYER_TYPE_HUMAN:
            continue
        // any player can move around the board at any time
        const new_hex_coord = xy(player_hexes[i].x + gamepad_array[i].xx,
            player_hexes[i].y + gamepad_array[i].yy)
        if is_valid_board_hex(new_hex_coord):
            player_hexes[i] = new_hex_coord;
    
    // Current player can push A to commit their move
    if player_types[current_player] == PLAYER_TYPE_HUMAN:
        if gamepad_array[current_player].aa:
            current_player_move_committed = true
    
    // CPU players enqueue their moves for future frames, so they don't just finish instantly
    if player_types[current_player] == PLAYER_TYPE_CPU and cpu_move_sequence == nil:
        cpu_move_sequence = sequence(CPU_MOVE_FRAMES/2, move_cpu_player,
            (CPU_MOVE_FRAMES+1)/2, commit_cpu_player)

    
    // Handle a newly-committed move
    const player_hex = player_hexes[current_player]
    if current_player_move_committed:
        current_player_move_committed = false
        cpu_move_sequence = nil
        // Can only flip on a cell you own
        if get_cell_owner_hex_coord(player_hex) ≠ current_player:
            play_sound(blip_12_sound) // error
        else:
            // successful flip
            play_sound(PLAYER_CLICK_SOUNDS[current_player])
            // change neighboring tiles to be owned by this player
            for neighbor < 6:
                if (player_current_moves[current_player] & (1<<neighbor)) ≠ 0:
                    const neighbor_hex = player_hex + HEX_COORD_NEIGHBOR_OFFSETS[neighbor]
                    const is_arrow2 = (player_current_moves[current_player] & (1<<(neighbor+6))) ≠ 0
                    const neighbor_hex_owner = get_cell_owner_hex_coord(neighbor_hex)
                    // out-of-bounds hexes can't be flipped
                    if neighbor_hex_owner == INVALID_HEX:
                        continue
                    // Normal arrows can only flip neutral tiles
                    else if neighbor_hex_owner == PLAYER_NEUTRAL:
                        set_cell_owner_hex_coord(neighbor_hex, current_player)
                        player_scores[current_player] += 1
                    // "super" arrows can flip other player's tiles
                    else if is_arrow2 and neighbor_hex_owner != current_player:
                        player_scores[neighbor_hex_owner] -= 1
                        set_cell_owner_hex_coord(neighbor_hex, current_player)
                        player_scores[current_player] += 1
            // advance current player
            advance_to_next_player()
            // move current players next move to their current move and generate a new next move
            player_current_moves[current_player] = player_next_moves[current_player]
            player_next_moves[current_player] = generate_move_code()
            // Update player "next move" previews
            let preview_mc = PLAYER_PREVIEW_MAP_COORDS[current_player]
            let preview_hc = transform_map_coord_to_hex(preview_mc)
            for neighbor < 6:
                const arrow_sprite = if (player_next_moves[current_player] & (1<<(neighbor+6))) == 0 then ARROW_SPRITES[neighbor] else ARROW2_SPRITES[neighbor]
                map_set_sprite_by_hex(map, preview_hc + HEX_COORD_NEIGHBOR_OFFSETS[neighbor],
                    if (player_next_moves[current_player] & (1<<neighbor)) ≠ 0 then arrow_sprite else ∅)


// draw things
draw_hex_map(map)
draw_gizmos()
//bgm_draw_debug(10)

for i < PLAYER_COUNT:
    if player_types[i] == PLAYER_TYPE_NONE:
        continue
    // Draw players on map
    draw_sprite_on_hex_map(PLAYER_OVERLAY_SPRITES[i], transform_hex_to_map_coord(player_hexes[i]))
    // Draw preview hexes for active players
    draw_sprite_on_hex_map(PLAYER_TERRITORY_SPRITES[i], PLAYER_PREVIEW_MAP_COORDS[i], 1)
    draw_sprite_on_hex_map(hex_sprite.overlay_next, PLAYER_PREVIEW_MAP_COORDS[i], 1)
// Draw current player's move around their hex
for neighbor < 6:
    if (player_current_moves[current_player] & (1<<neighbor)) ≠ 0:
        const arrow_hex = player_hexes[current_player] + HEX_COORD_NEIGHBOR_OFFSETS[neighbor]
        const arrow_sprite = if (player_current_moves[current_player] & (1<<(neighbor+6))) == 0 then ARROW_SPRITES[neighbor] else ARROW2_SPRITES[neighbor]
        draw_sprite_on_hex_map(arrow_sprite.animation.frame(mode_frames),
            transform_hex_to_map_coord(arrow_hex))
