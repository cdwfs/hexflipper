Play
════════════════════════════════════════════════════════════════════════

/** Clone of map for the game */
let map
let player_types
let player_hexes
let disable_input
const PLAYER_COUNT = 4 // players are skipped if player_types[i] == PLAYER_TYPE_NONE
const PLAYER_NEUTRAL = -1
const INVALID_HEX = -2
const PLAYER_CLICK_SOUNDS = [
    {sound:blip_05_sound, pan: -50%, volume: 100%},
    {sound:blip_07_sound, pan: +50%, volume: 100%},
    {sound:blip_05_sound, pan: -50%, volume: 100%},
    {sound:blip_07_sound, pan: +50%, volume: 100%},
    ]
const PLAYER_TERRITORY_SPRITES = [
    hex_sprite.territory_p1,
    hex_sprite.territory_p2,
    hex_sprite.territory_p3,
    hex_sprite.territory_p4,
    ]
const PLAYER_OVERLAY_SPRITES = [
    hex_sprite.overlay_p1,
    hex_sprite.overlay_p2,
    hex_sprite.overlay_p3,
    hex_sprite.overlay_p4,
    ]
const PLAYER_PREVIEW_MAP_COORDS = [
    xy(3,8),
    xy(12,2),
    xy(3,2),
    xy(12,8),
    ]
const VALID_HEX_COORD_MASK = [
    0b0000000000000000,
    0b0000001111100000,
    0b0000001111110000,
    0b0000001111111000,
    0b0000001111111100,
    0b0000001111111110,
    0b0000000111111110,
    0b0000000011111110,
    0b0000000001111110,
    0b0000000000111110,
    0b0000000000000000,
    ]
const DIR_NE = 0
const DIR_E  = 1
const DIR_SE = 2
const DIR_SW = 3
const DIR_W  = 4
const DIR_NW = 5
const HEX_COORD_NEIGHBOR_OFFSETS = [
    xy(+0,+1), // NE
    xy(+1,+0), // E
    xy(+1,-1), // SE
    xy(+0,-1), // SW
    xy(-1,+0), // W
    xy(-1,+1), // NW
    ]
const ARROW_SPRITES = [
    hex_sprite.arrow_ne[0],
    hex_sprite.arrow_e[0],
    hex_sprite.arrow_se[0],
    hex_sprite.arrow_sw[0],
    hex_sprite.arrow_w[0],
    hex_sprite.arrow_nw[0],
    ]

// Draw a sprite at the provided map coordinates
def draw_sprite_on_hex_map(sprite, map_coord):
    let pos = xy(
        MUL(HEX_WIDTH, MAD(½, map_coord.y bitand 1, map_coord.x)),
        MUL(HEX_HEIGHT_75, map_coord.y))
    draw_sprite(sprite, pos)    

// Per-cell owner info
let map_cell_owner
// Get the player ID of a map cell (PLAYER_NEUTRAL for unclaimed cells, INVALID_HEX for cells outside the play area)
def get_cell_owner_map_coord(map_coord):
    return map_cell_owner[map_coord.x][map_coord.y]
def get_cell_owner_hex_coord(hex_coord):
    return get_cell_owner_map_coord(transform_hex_to_map_coord(hex_coord))
// Change the owner of a cell (including swapping its sprite)
def set_cell_owner_map_coord(map_coord, player_id):
    map_cell_owner[map_coord.x][map_coord.y] = player_id
    set_map_sprite(map, map_coord,
        if player_id == PLAYER_NEUTRAL then hex_sprite.territory_neutral else PLAYER_TERRITORY_SPRITES[player_id])
def set_cell_owner_hex_coord(hex_coord, player_id):
    set_cell_owner_map_coord(transform_hex_to_map_coord(hex_coord), player_id)
// Check whether a cell is within the play area
def is_valid_board_hex(hex_coord):
    return get_cell_owner_hex_coord(hex_coord) ≠ INVALID_HEX

// Generate a move code. Not all moves are equally likely.
let player_current_moves
let player_next_moves
def generate_move_code():
    const p = ξ
    let bit_count = 0
    if p < 0.50:
        bit_count = 1
    else if p < 0.80:
        bit_count = 2
    else if p < 0.90:
        bit_count = 3
    else if p < 0.95:
        bit_count = 4
    else if p < 0.98:
        bit_count = 5
    else:
        bit_count = 6
    let move = 0b000000
    const set_bits = slice(shuffled([0,1,2,3,4,5]), 0, bit_count)
    for b in set_bits:
        move ∪= 1<<b
    return move

// turn-taking
let current_player
def advance_to_next_player():
    current_player = (current_player+1) % 4
    while player_types[current_player] == PLAYER_TYPE_NONE:
        current_player = (current_player+1) % 4

def enter_menu_mode(data):
    reset_post_effects()
    set_mode(Menu) because "Returned to main menu"
    
let pulse_hex_scale = 1

enter(in_player_types)
────────────────────────────────────────────────────────────────────────

map = clone(game_board_map)
player_types = clone(in_player_types)
set_random_seed() // default is time-based

// Reset per-player data
player_hexes = [xy(1,9), xy(9,1), xy(5,1), xy(5,9)]
player_current_moves = [0,0,0,0]
player_next_moves = [0,0,0,0]

set_transform(xy(-48, SCREEN_SIZE.y + 8), xy(1, -1))

map_cell_owner = []
for x < size(map):
    let new_col = []
    for y < size(map[x]):
        let hc = transform_map_coord_to_hex(xy(x,y))
        new_col.push(if (VALID_HEX_COORD_MASK[hc.y] & (1<<hc.x)) ≠ 0 then PLAYER_NEUTRAL else INVALID_HEX)
    map_cell_owner.push(new_col)
for i < PLAYER_COUNT:
    if player_types[i] == PLAYER_TYPE_NONE:
        continue
    // Players start on their own territory
    set_cell_owner_hex_coord(player_hexes[i], i)
    // random starting moves for each player
    player_current_moves[i] = generate_move_code()
    player_next_moves[i] = generate_move_code()
    // Initialize each player's "next move" preview
    let preview_mc = PLAYER_PREVIEW_MAP_COORDS[i]
    let preview_hc = transform_map_coord_to_hex(preview_mc)
    for neighbor < 6:
        map_set_sprite_by_hex(map, preview_hc + HEX_COORD_NEIGHBOR_OFFSETS[neighbor],
            if (player_next_moves[i] & (1<<neighbor)) ≠ 0 then ARROW_SPRITES[neighbor] else ∅)

// reset turn counter
current_player = 0

disable_input = false
bgm_start()

leave
────────────────────────────────────────────────────────────────────────
bgm_stop()
reset_transform()

frame
────────────────────────────────────────────────────────────────────────

//
// reactive-music stuff goes here
//
bgm_update()

local:
    const sq3 = sqrt(3)
    const verts = [xy(0,2), xy(-sq3, 1), xy(-sq3,-1), xy(0,-2), xy(sq3,-1), xy(sq3,1)]
    const hex_poly_args = {vertex_array:verts, color:rgba(0,0,0,0), outline:#f,}
    // spinny hex
    const theta = clamp((3*bgm_measure_t)^3,0,1) * pi/3
    draw_poly({pos:xy(100,100), scale:xy(10,10), angle:theta, ...hex_poly_args})
    // pulsing hex
    const b = bgm_beat % 48
    const bd = [0,2,5,7,8,11, 12,14,17,19, 24,26,29,31,35, 36,38,41,43,] 
    const sd = [4,9,10, 16,21,22,23, 28,33,34, 40,45,46,47,] 
    if bgm_beat_ff && find(sd, b) != nil:
        pulse_hex_scale = 2
    else:
        pulse_hex_scale -= 0.02
    draw_poly({pos:xy(100,200), scale:10*xy(pulse_hex_scale, pulse_hex_scale), ...hex_poly_args})
    
    let postfx = get_post_effects()
    postfx.bloom = -((bgm_measure_t-1)^9)
    set_post_effects(postfx)

// handle dpad input
if not disable_input:
    // DEBUG: test returning to the main menu if (e) and (f) are pressed together
    if gamepad_array[0].e != 0 and gamepad_array[0].f != 0:
        disable_input = true
        add_frame_hook(fade_out, enter_menu_mode, 30, ∅, {})

    for i < PLAYER_COUNT:
        if player_types[i] == PLAYER_TYPE_NONE:
            continue
        const new_hex_coord = xy(player_hexes[i].x + gamepad_array[i].xx,
            player_hexes[i].y + gamepad_array[i].yy)
        if is_valid_board_hex(new_hex_coord):
            player_hexes[i] = new_hex_coord;
    
    // Current player can push A to commit their move
    const player_hex = player_hexes[current_player]
    if gamepad_array[current_player].aa:
        // Can only flip on a cell you own
        if get_cell_owner_hex_coord(player_hex) ≠ current_player:
            play_sound(blip_12_sound) // error
        else:
            // successful flip
            play_sound(PLAYER_CLICK_SOUNDS[current_player])
            for neighbor < 6:
                if (player_current_moves[current_player] & (1<<neighbor)) ≠ 0:
                    const neighbor_hex = player_hex + HEX_COORD_NEIGHBOR_OFFSETS[neighbor]
                    if is_valid_board_hex(neighbor_hex):
                        set_cell_owner_hex_coord(neighbor_hex, current_player)
            // advance current player
            advance_to_next_player()
            // move current players next move to their current move and generate a new next move
            player_current_moves[current_player] = player_next_moves[current_player]
            player_next_moves[current_player] = generate_move_code()
            // Update player "next move" previews
            let preview_mc = PLAYER_PREVIEW_MAP_COORDS[current_player]
            let preview_hc = transform_map_coord_to_hex(preview_mc)
            for neighbor < 6:
                map_set_sprite_by_hex(map, preview_hc + HEX_COORD_NEIGHBOR_OFFSETS[neighbor],
                    if (player_next_moves[current_player] & (1<<neighbor)) ≠ 0 then ARROW_SPRITES[neighbor] else ∅)


// draw things
draw_hex_map(map)
// Draw players on map
for i < PLAYER_COUNT:
    if player_types[i] == PLAYER_TYPE_NONE:
        continue
    draw_sprite_on_hex_map(PLAYER_OVERLAY_SPRITES[i], transform_hex_to_map_coord(player_hexes[i]))
// Draw current player's move around their hex
for neighbor < 6:
    if (player_current_moves[current_player] & (1<<neighbor)) ≠ 0:
        const arrow_hex = player_hexes[current_player] + HEX_COORD_NEIGHBOR_OFFSETS[neighbor]
        draw_sprite_on_hex_map(ARROW_SPRITES[neighbor].animation.frame(mode_frames),
            transform_hex_to_map_coord(arrow_hex))
// reactive music debug overlay
bgm_draw_debug(10)
